openapi: 3.0.0
info:
  title: API Spring Java - Gerenciamento de tarefas
  version: 1.0.0
servers:
  - url: http://{{base_url}}
  - url: http://localhost:8080
paths:
  /:
    post:
      tags:
        - API Spring Java para Gerenciamento de Tarefas
      summary: Cria nova tarefa
      description: >-
        This is a POST request, submitting data to an API via the request body.
        This request submits JSON data, and the data is reflected in the
        response.


        A successful POST request typically returns a `200 OK` or `201 Created`
        response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nome: Imprimir livro
                dataEntrega: '2025-08-10'
                responsavel: Gabriel
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - API Spring Java para Gerenciamento de Tarefas
      summary: Lista todas as tarefas
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tarefas/5:
    get:
      tags:
        - API Spring Java para Gerenciamento de Tarefas
      summary: Lista uma tarefa por ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - API Spring Java para Gerenciamento de Tarefas
      summary: Atualiza uma tarefa por ID
      description: >-
        This is a PUT request and it is used to overwrite an existing piece of
        data. For instance, after you create an entity with a POST request, you
        may want to modify that later. You can do that using a PUT request. You
        typically identify the entity being updated by including an identifier
        in the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or
        `204 No Content` response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nome: Gabriel
                dataEntrega: '2025-08-10'
                responsavel: Gabriel
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - API Spring Java para Gerenciamento de Tarefas
      summary: Apaga uma tarefa por ID
      description: >-
        This is a DELETE request, and it is used to delete data that was
        previously created via a POST request. You typically identify the entity
        being updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202
        Accepted`, or `204 No Content` response code.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
